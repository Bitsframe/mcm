"use client";
import { Input_Component } from "@/components/Input_Component";
import { Select_Dropdown } from "@/components/Select_Dropdown";
import React, { useContext, useEffect, useState } from "react";
import { IoCloseOutline } from "react-icons/io5";
import { Select } from "flowbite-react";
import { Action_Button } from "@/components/Action_Button";
import {
  create_content_service,
  delete_content_service,
  fetch_content_service,
  update_content_service,
} from "@/utils/supabase/data_services/data_services";
import moment from "moment";
import { Custom_Modal } from "@/components/Modal_Components/Custom_Modal";
import { useRouter } from "next/navigation";
import { useLocationClinica } from "@/hooks/useLocationClinica";
import { supabase } from "@/services/supabase";
import { toast } from "react-toastify";
import { validateFormData } from "@/utils/validationCheck";
import { LocationContext } from "@/context";
import PhoneNumberInput from "@/components/PhoneNumberInput";
import { CiFilter } from "react-icons/ci";
import { formatPhoneNumber } from "@/utils/getCountryName";
import { useTranslation } from "react-i18next";
import { translationConstant } from "@/utils/translationConstants";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Dialog,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Search } from "lucide-react";

interface PatientDetailsInterface {
  firstname: string;
  lastname: string;
  phone: string;
  email: string;
  treatmenttype: string;
  gender: string;
  locationid: string;
  created_at: string;
  updated_at: string;
}

const fields = [
  {
    id: "id",
    label: "Id",
    type: "number",
    autoGenerated: true,
    editable: false,
    table_column: false,
    details_section: false,
    details_order: 0,
  },
  {
    id: "firstname",
    label: "First Name",
    type: "text",
    editable: true,
    table_column: true,
    details_section: true,
    details_order: 1,
    col_span_01_modal: true,
  },
  {
    id: "lastname",
    label: "Last Name",
    type: "text",
    editable: true,
    table_column: true,
    details_section: true,
    details_order: 2,
    col_span_01_modal: true,
  },
  {
    id: "email",
    label: "Email",
    type: "text",
    editable: true,
    table_column: true,
    details_section: true,
    details_order: 3,
  },
  {
    id: "phone",
    label: "Phone",
    type: "text",
    editable: true,
    table_column: false,
    details_section: true,
    details_order: 4,
  },
  {
    id: "treatmenttype",
    label: "Treatment Type",
    type: "text",
    editable: true,
    table_column: true,
    details_section: true,
    details_order: 6,
    col_span_01_modal: true,
  },
  {
    id: "gender",
    label: "Gender",
    type: "text",
    editable: true,
    table_column: true,
    details_section: true,
    details_order: 5,
    col_span_01: true,
  },
  {
    id: "locationid",
    label: "Location",
    type: "number",
    editable: true,
    table_column: false,
    details_order: 7,
    col_span_01: false,
  },
];

const modal_titles: any = {
  create: {
    modalLabel: "Create New",
    button: {
      label: "Create",
      color: "blue",
    },
  },
  edit: {
    modalLabel: "Edit",
    button: {
      label: "Update",
      color: "blue",
    },
  },
  delete: {
    modalLabel: "Delete Confirmation",
    button: {
      label: "Delete",
      color: "failure",
    },
  },
};

const Promo_Input = () => {
  return (
    <div className="w-52 flex rounded-md items-center bg-gray-200 dark:bg-gray-700 p-2 px-2">
      <input
        type="text"
        placeholder="Enter Promo Code"
        className="w-full px-1 py-1 text-sm border-2 border-gray-300 dark:border-gray-600 focus:outline-none focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-800 dark:text-white"
      />
      <IoCloseOutline className="text-gray-500 dark:text-gray-400" />
    </div>
  );
};

const Payment_Method_Select = () => {
  return (
    <div className="w-52">
      <Select
        className="w-full h-auto"
        style={{ backgroundColor: "#f3f4f6", color: "black" }}
        id="section"
        required={true}
      >
        <option className="bg-white dark:bg-gray-700">Cash</option>
        <option className="bg-white dark:bg-gray-700">Debit Card</option>
      </Select>
    </div>
  );
};

const Patients = () => {
  const [modalOpen, setModalOpen] = useState(false);
  const { locations } = useLocationClinica();
  const [dataList, setDataList] = useState<PatientDetailsInterface[]>([]);
  const [allData, setAllData] = useState<PatientDetailsInterface[]>([]);
  const [detailsView, setDetailsView] =
    useState<PatientDetailsInterface | null>(null);
  const [actionData, setActionData] = useState<any>({});
  const [createActionData, setCreateActionData] = useState<any>({});
  const [editDetails, setEditDetails] = useState<PatientDetailsInterface | {}>(
    {}
  );
  const [loading, setLoading] = useState(true);
  const [activeModalMode, setActiveModalMode] = useState<
    "edit" | "delete" | "create" | ""
  >("");
  const [modalLoading, setModalLoading] = useState(false);
  const [isOpenModal, setIsOpenModal] = useState(false);
  const [services, setServices] = useState<string[] | null | undefined>([]);
  const [canModalSubmit, setCanModalSubmit] = useState(false);
  const [canAddPatient, setCanAddPatient] = useState(false);
  const { selectedLocation, setSelectedLocation } = useContext(LocationContext);
  const [activeFilterBtn, setActiveFilterBtn] = useState(0);

  const category_change_handle = () => {};

  const router = useRouter();

  const fetch_handle = async (locationId: number) => {
    setLoading(true);

    const todayStart = moment().startOf("day").toISOString();

    const filterOptions =
      activeFilterBtn === 0
        ? [{ column: "updated_at", operator: "gte", value: todayStart }]
        : [{ column: "updated_at", operator: "lt", value: todayStart }];

    const fetched_data: any = await fetch_content_service({
      table: "pos",
      matchCase: [{ key: "locationid", value: locationId || 17 }],
      filterOptions: filterOptions,
      sortOptions: { column: "updated_at", order: "desc" },
    });

    setDataList(fetched_data);
    setAllData(fetched_data);
    setLoading(false);
  };

  useEffect(() => {
    fetch_handle(selectedLocation?.id);
  }, [, selectedLocation, activeFilterBtn]);

  useEffect(() => {
    const fetchServices = async () => {
      let { data, error } = await supabase.from("services").select("title");

      if (data) {
        const serviceData = data.map((item) => item.title);
        setServices(serviceData);
      }
    };

    fetchServices();
  }, []);

  const openModalHandle = () => {
    setIsOpenModal(true);
  };
  const closeModalHandle = () => {
    setIsOpenModal(false);
    setActionData({});
    setActiveModalMode("");
    setCanModalSubmit(false);
  };

  const editHandle = (data: any) => {
    openModalHandle();
    setActionData(data);
    setActiveModalMode("edit");
  };

  const deleteHandle = (data: any) => {
    openModalHandle();
    setActionData(data);
    setActiveModalMode("delete");
    setCanModalSubmit(true);
  };

  const selectHandle = (data: any) => {
    localStorage.setItem("@pos-patient", JSON.stringify(data));
    router.push("/pos/sales");
  };

  const modalInputChangeHandle = (e: any, id: string) => {
    setActionData((pre: any) => ({ ...pre, [id]: e }));
    setCanModalSubmit(true);
  };
  const addPatientFieldsChange = (e: any, id: string) => {
    setCreateActionData((pre: any) => ({ ...pre, [id]: e }));
  };

  const onChangeHandle = (e: any) => {
    const val = e.target.value;
    if (val === "") {
      setDataList([...allData]);
    } else {
      const filteredData = allData.filter(({ firstname, lastname }) => {
        const concatName = `${firstname} ${lastname}`;
        return concatName.toLocaleLowerCase().includes(val.toLocaleLowerCase());
      });
      setDataList([...filteredData]);
    }
  };

  const deleteDataHandle = async () => {
    setModalLoading(true);
    const selectedId = actionData?.id;
    const { data: res_data, error } = await delete_content_service({
      table: "pos",
      id: selectedId,
    });
    if (!error) {
      setDataList((elem) => elem.filter((data: any) => data.id !== selectedId));
      setAllData((elem) => elem.filter((data: any) => data.id !== selectedId));
      setDetailsView(null);
      toast.success("Deleled successfully");
      closeModalHandle();
    } else if (error) {
      toast.error(error.message);
    }

    setModalLoading(false);
  };

  const editDataHandle = async () => {
    setModalLoading(true);
    try {
      const data = await update_content_service({
        table: "pos",
        language: "",
        post_data: actionData,
      });
      if (data?.length) {
        toast.success("Updated successfully");
        closeModalHandle();

        const newData = data[0];

        const newDataSetDataList = allData.map((elem) =>
          //@ts-ignore
          newData.id === elem.id ? newData : elem
        );

        const newDataSetAllData = dataList.map((elem) =>
          // @ts-ignore
          newData.id === elem.id ? newData : elem
        );

        setAllData([...newDataSetAllData]);
        setDataList([...newDataSetDataList]);
        setDetailsView(newData);
      }
    } catch (error: any) {
      if (error && error?.message) {
        toast.error(error?.message);
      } else {
        toast.error("Something went wrong!");
      }
    }
    setModalLoading(false);
  };

  const modalSubmitHandle = async () => {
    switch (activeModalMode) {
      case "create":
        break;
      case "edit":
        editDataHandle();
        break;
      case "delete":
        deleteDataHandle();
        break;
    }
  };

  const createNewDataHandle = async () => {
    const requiredFields = [
      "locationid",
      "firstname",
      "lastname",
      "email",
      "gender",
      "phone",
      "treatmenttype",
    ];

    const validateData = validateFormData(createActionData);

    if (!validateData) {
      return;
    }

    const postData = {
      ...createActionData,
      locationid: selectedLocation?.id || "",
    };
    for (const field of requiredFields) {
      if (!postData[field]) {
        toast.warning(`Please fill in the ${field}`);
        return;
      }
    }
    const { data, error } = await create_content_service({
      table: "pos",
      language: "",
      post_data: postData,
    });

    if (error) {
      if (
        error?.message ===
        'duplicate key value violates unique constraint "Appoinments_date_and_time_key"'
      ) {
        toast.error(
          `Sorry, Appointment time slot is not available, Please select any other time slot`
        );
      } else {
        toast.error(`Error adding patient: ${error?.message}`);
      }
    } else {
      toast.success("Patient successfully added!");
      setCreateActionData({});
      fetch_handle(selectedLocation?.id);
    }
  };

  const { t } = useTranslation(translationConstant.POSSALES);

  const [isOpen, setIsOpen] = useState(false);

  return (
    <main className="w-full bg-white dark:bg-gray-900 font-normal text-base p-2">
      <div className="w-full flex justify-center gap-4">
        <div className="bg-gray-100 dark:bg-[#080e16] rounded-lg shadow-sm w-[65%]">
          <div className="p-4 flex justify-between items-center">
            <div>
              <h1 className="text-xl font-medium text-gray-800 dark:text-gray-200 mb-4">
                All Patients
              </h1>
              <div className="relative">
  <Search 
    className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400 dark:text-gray-500" 
  />
  <input
    onChange={onChangeHandle}
    type="text"
    placeholder="Search by patient name"
    className="pl-10 pr-4 py-2 w-60 text-sm rounded-md focus:outline-none border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-800 dark:text-white"
  />
</div>
            </div>
            <div className="space-x-3 flex items-center">
              <button
                onClick={() => setActiveFilterBtn(0)}
                className={`px-4 py-2 rounded-md text-sm ${
                  activeFilterBtn === 0
                    ? "bg-blue-600 text-white"
                    : "bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 border border-gray-300 dark:border-gray-600"
                }`}
              >
                Today
              </button>
              <button
                onClick={() => setActiveFilterBtn(1)}
                className={`px-4 py-2 rounded-md text-sm ${
                  activeFilterBtn === 1
                    ? "bg-blue-600 text-white"
                    : "bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 border border-gray-300 dark:border-gray-600"
                }`}
              >
                Past Records
              </button>
            </div>
          </div>

          <div className="overflow-auto max-h-[500px]">
            <div className="px-4 pb-4">
              {dataList.map((elem, ind) => {
                const { firstname, lastname, phone, updated_at } = elem;
                const formattedDateTime = moment
                  .utc(updated_at, "YYYY-MM-DD h:mm s")
                  .local()
                  .format("DD/MM/YYYY h:mm A");

                return (
                  <div
                    key={ind}
                    className="border-b border-gray-300 dark:border-gray-700 py-4 flex items-center justify-between"
                  >
                    <div className="space-y-1">
                      <p className="text-xs text-gray-500 dark:text-gray-400">
                        Name
                      </p>
                      <p className="text-sm font-medium text-gray-700 dark:text-gray-200">{`${firstname} ${lastname}`}</p>
                    </div>

                    <div className="space-y-1">
                      <p className="text-xs text-gray-500 dark:text-gray-400">
                        Phone
                      </p>
                      <p className="text-sm text-gray-600 dark:text-gray-300">
                        {formatPhoneNumber(phone)}
                      </p>
                    </div>

                    <div className="space-y-1">
                      <p className="text-xs text-gray-500 dark:text-gray-400">
                        Created at
                      </p>
                      <p className="text-sm text-gray-600 dark:text-gray-300">
                        {formattedDateTime}
                      </p>
                    </div>

                    <div className="flex items-center gap-2">
                      <button
                        onClick={() => editHandle(elem)}
                        className="bg-blue-600 text-white px-3 py-1 rounded text-sm flex items-center gap-1"
                      >
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          className="h-4 w-4"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                        >
                          <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                          <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                        </svg>
                        Edit
                      </button>
                      <button
                        onClick={() => selectHandle(elem)}
                        className="border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-200 px-3 py-1 rounded text-sm flex items-center gap-1 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600"
                      >
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          className="h-4 w-4"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                        >
                          <polyline points="9 11 12 14 22 4"></polyline>
                          <path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"></path>
                        </svg>
                        Select
                      </button>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>

        <div className="bg-gray-100 dark:bg-[#080e16] rounded-md flex flex-col w-[35%] p-4">
          <div className="mb-4">
            <h2 className="text-xl font-medium text-gray-800 dark:text-gray-200 text-left">
              Add New Patient
            </h2>
          </div>

          <div className="overflow-auto w-full space-y-4">
            <div className="w-full space-y-4">
              <div>
                <Input_Component
                  value={createActionData.firstname}
                  onChange={(e: string) =>
                    addPatientFieldsChange(e, "firstname")
                  }
                  label={t("POS-Sales_k19")}
                  bg_color="bg-white dark:bg-gray-700"
                  placeholder="Enter your full name"
                />
              </div>

              <div>
                <Input_Component
                  value={createActionData.lastname}
                  onChange={(e: string) =>
                    addPatientFieldsChange(e, "lastname")
                  }
                  label={t("POS-Sales_k20")}
                  bg_color="bg-white dark:bg-gray-700"
                  placeholder="Enter your last name"

                />
              </div>

              <div>
                <Select_Dropdown
                  value={createActionData.gender}
                  bg_color="bg-white dark:bg-gray-700"
                  start_empty={true}
                  options_arr={["Male", "Female"].map((gender) => ({
                    value: gender,
                    label: gender,
                  }))}
                  required={true}
                  on_change_handle={(e: string) =>
                    // @ts-ignore
                    addPatientFieldsChange(e.target.value, "gender")
                  }
                  label={t("POS-Sales_k21")}
                />
              </div>

              <div>
                <Input_Component
                  value={createActionData.email}
                  onChange={(e: string) => addPatientFieldsChange(e, "email")}
                  label={t("POS-Sales_k22")}
                  bg_color="bg-white dark:bg-gray-700"
                  placeholder="Enter your email"

                />
              </div>

              <div>
                <PhoneNumberInput
                  value={createActionData.phone}
                  onChange={(e: string) => addPatientFieldsChange(e, "phone")}
                  label={t("POS-Sales_k23")}
                  placeholder=""
                  breakpoint={false}
                />
              </div>

              <div>
                <Select_Dropdown
                  value={createActionData.treatmenttype}
                  bg_color="bg-white dark:bg-gray-700"
                  start_empty={true}
                  // @ts-ignore
                  options_arr={services?.map((service) => ({
                    value: service,
                    label: service,
                  }))}
                  required={true}
                  on_change_handle={(e: string) =>
                    // @ts-ignore
                    addPatientFieldsChange(e.target.value, "treatmenttype")
                  }
                  label={t("POS-Sales_k24")}
                />
              </div>
            </div>
          </div>

          <div className="mt-6">
            <button
              onClick={createNewDataHandle}
              className="bg-blue-600 py-3 w-full text-center text-white hover:bg-blue-700 transition-colors rounded-md font-medium"
            >
              Add Patient
            </button>
          </div>
        </div>
      </div>

      {/* @ts-ignore */}
      <Custom_Modal
  disabled={!canModalSubmit}
  submit_button_color={modal_titles[activeModalMode]?.button?.color}
  loading={modalLoading}
  buttonLabel={modal_titles[activeModalMode]?.button?.label}
  is_open={isOpenModal}
  Title={activeModalMode && modal_titles[activeModalMode]?.modalLabel}
  close_handle={closeModalHandle}
  open_handle={openModalHandle}
  create_new_handle={modalSubmitHandle}
>
  {activeModalMode === "delete" ? (
    <div className="text-gray-800 dark:text-gray-200">
      <h1>Are you sure you want to delete this POS?</h1>
    </div>
  ) : (
    <div className="grid grid-cols-2 gap-4 text-gray-800 dark:text-gray-200">
      <div className="col-span-1">
        <Input_Component
          value={actionData?.firstname || ""}
          type="text"
          border="border-2 border-gray-300 dark:border-none rounded-md"
          bg_color="bg-white dark:bg-gray-700"
          onChange={(e: string) => modalInputChangeHandle(e, "firstname")}
          label="First Name"
        />
      </div>

      <div className="col-span-1">
        <Input_Component
          value={actionData?.lastname || ""}
          type="text"
          border="border-2 border-gray-300 dark:border-none rounded-md"
          bg_color="bg-white dark:bg-gray-700"
          onChange={(e: string) => modalInputChangeHandle(e, "lastname")}
          label="Last Name"
        />
      </div>

      <div className="col-span-2">
        <Input_Component
          value={actionData?.email || ""}
          type="text"
          border="border-2 border-gray-300 dark:border-none rounded-md"
          bg_color="bg-white dark:bg-gray-700"
          onChange={(e: string) => modalInputChangeHandle(e, "email")}
          label="Email"
        />
      </div>

      <div className="col-span-2">
        <PhoneNumberInput
          value={actionData?.phone || ""}
          onChange={(e: string) => modalInputChangeHandle(e, "phone")}
          label="Phone Number"
          placeholder=""
          breakpoint={false}
        />
      </div>

      <Select_Dropdown
        value={actionData?.treatmenttype || ""}
        bg_color="bg-white dark:bg-gray-700"
        start_empty
        //@ts-ignore
        options_arr={services?.map((service) => ({
          value: service,
          label: service,
        }))}
        required
        on_change_handle={(e: string) =>
          //@ts-ignore
          modalInputChangeHandle(e.target.value, "treatmenttype")
        }
        label="Treatment Type"
      />

      <Select_Dropdown
        value={actionData?.gender || ""}
        bg_color="bg-white dark:bg-gray-700"
        start_empty
        options_arr={["Male", "Female"].map((gender) => ({
          value: gender,
          label: gender,
        }))}
        required
        on_change_handle={(e: string) =>
          // @ts-ignore
          modalInputChangeHandle(e.target.value, "gender")
        }
        label="Gender"
      />
    </div>
  )}
</Custom_Modal>

    </main>
  );
};

export default Patients;
