'use client'
import React, { useEffect, useState } from 'react'
import { Spinner } from 'flowbite-react';
import moment from 'moment';
import { create_content_service, delete_content_service, fetch_content_service, update_content_service } from '@/utils/supabase/data_services/data_services';
import { PiCaretUpDownBold } from 'react-icons/pi';
import { Custom_Modal } from '@/components/Modal_Components/Custom_Modal';
import { Input_Component } from '@/components/Input_Component';
import { Action_Button } from '@/components/Action_Button';
import { toast } from 'react-toastify';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { useTranslation } from 'react-i18next';
import { translationConstant } from '@/utils/translationConstants';

const fields = [
  {
    id: 'id',
    label: 'Promo id',
    type: 'number',
    autoGenerated: true,
    editable: false,
    table_column: false,
    details_section: false,
    details_order: 0

  },
  {
    id: 'active',
    label: 'Procode_k4',
    type: 'boolean',
    editable: false,
    table_column: true,
    details_section: true,
    render_value: (val: boolean) => val ? 'Active' : 'In-active',
    align: 'text-start',
    details_order: 3
  },
  {
    id: 'typename',
    label: 'Procode_k5',
    details_label: 'Procode_k9',
    type: 'text',
    editable: true,
    table_column: true,
    details_section: true,
    details_order: 1
  },
  {
    id: 'multiple',
    label: 'Procode_k12',
    type: 'boolean',
    editable: true,
    table_column: false,
    details_section: true,
    render_value: (val: boolean) => val ? 'True' : 'False',
    details_order: 4
  },
  {
    id: 'percentage',
    label: 'Procode_k6',
    type: 'number',
    editable: true,
    table_column: true,
    details_section: true,
    render_value: (val: number) => `${val}%`,
    details_order: 2,
    col_span_01_modal: true,
    max:100
  },
  {
    id: 'expiry',
    label: 'Procode_k7',
    type: 'date',
    editable: true,
    table_column: true,
    details_section: true,
    render_value: (val: string) => moment(val, 'YYYY-MM-DD h:mm s').format('MM/DD/YYYY'),
    min: moment(new Date()).format('YYYY-MM-DD') ,
    align: 'text-end',
    details_order: 5,
    col_span_01: true
  },
  {
    id: 'created_at',
    label: 'Procode_k14',
    type: 'date',
    editable: false,
    table_column: false,
    details_section: true,
    render_value: (val: string) => moment(val, 'YYYY-MM-DD h:mm:s').utc().format('MM/DD/YYYY'),
    details_order: 6,
    col_span_01: true
  },
]



interface DataListInterface {
  [x: string]: any;
  id: number;
  typename: string;
  active: boolean;
  multiple: boolean;
  percentage: number;
  expiry: string;
  created_at: string;
}

function removeDuplicates(array: DataListInterface[]): DataListInterface[] {
  const seenIds = new Set<number>();
  return array.filter(element => {
    if (!seenIds.has(element.id)) {
      seenIds.add(element.id);
      return true;
    }
    return false;
  });
}

const modal_titles: any = {
  create: {
    modalLabel: 'Create New Promocode',
    button: {
      label: 'Create Promocode',
      color: 'info'
    }
  },
  edit: {
    modalLabel: 'Edit Promocode',
    button: {
      label: 'Update Promocode',
      color: 'info'
    }
  },
  delete: {
    modalLabel: 'Delete Promocode Confirmation',
    button: {
      label: 'Delete Promocode',
      color: 'failure'
    }
  },
}
const Page = () => {



  const [dataList, setDataList] = useState<DataListInterface[]>([])
  const [allData, setAllData] = useState<DataListInterface[]>([])
  const [detailsView, setDetailsView] = useState<DataListInterface | null>(null)
  const [loading, setLoading] = useState(true)
  const [sortOrder, setSortOrder] = useState(-1)
  const [sortColumn, setSortColumn] = useState('')
  const [isOpenModal, setIsOpenModal] = useState(false)
  const [activeModalMode, setActiveModalMode] = useState<'edit' | 'delete' | 'create' | ''>('')
  const [newDetails, setNewDetails] = useState<any>({})
  const [modalLoading, setModalLoading] = useState(false)


  const openModalHandle = () => {
    setIsOpenModal(true)
  }
  const closeModalHandle = () => {
    setIsOpenModal(false)
    setNewDetails({})
    setActiveModalMode('')
  }

  const onChangeHandle = (e: any) => {
    const val = e.target.value
    if (val === '') {
      setDataList([...allData])

    }
    else {

      const filteredData = allData.filter((elem) => {
        const concatName = elem.typename
        return concatName.toLocaleLowerCase().includes(val.toLocaleLowerCase())
      })
      setDataList([...filteredData])
    }
  }

  const detailsViewHandle = (param_data: DataListInterface) => {

    setDetailsView(param_data)
  }



  const fetch_handle = async () => {
    setLoading(true)
    // @ts-ignore
    const fetched_data: any = await fetch_content_service({ table: 'promotype' });
    setDataList(fetched_data)
    setAllData(fetched_data)
    setLoading(false)


  }

  useEffect(() => {
    fetch_handle()
  }, [])






  const sortHandle = (column: string, type: string) => {
    console.log(column)
    let sortedList: any = []
    if (type === 'text') {
      sortedList = dataList.sort((a, b) => {
        const aConcatName = a[column]
        const bConcatName = b[column]

        if (sortOrder === 1) {
          return aConcatName.localeCompare(bConcatName)

        }
        else {
          return bConcatName.localeCompare(aConcatName)

        }

      })

    }
    else if (type === 'date') {
      if (sortOrder === 1) {
        sortedList = dataList.sort((a, b) => new Date(a[column]).getTime() - new Date(b[column]).getTime())
      } else {

        sortedList = dataList.sort((a, b) => new Date(b[column]).getTime() - new Date(a[column]).getTime())

      }
    }
    else {
      if (sortOrder === 1) {
        sortedList = dataList.sort((a, b) => a[column] - b[column])
      } else {

        sortedList = dataList.sort((a, b) => b[column] - a[column])
      }

    }

    setSortOrder((order) => order === -1 ? 1 : -1)
    setDataList([...sortedList])
    setSortColumn(column)


  }


  const modalInputChangeHandle = (e: string, id: string) => {
    setNewDetails((pre: any) => ({ ...pre, [id]: e }))


  }




  const createNewDataHandle = async () => {
    setModalLoading(true)
    const { data: res_data, error } = await create_content_service({ table: 'promotype', language: '', post_data: newDetails });
    if (error) {
      console.log(error.message);
      toast.error(error.message);
      // throw new Error(error.message);
    }




    if (res_data?.length) {
      toast.success('Created successfully');
      closeModalHandle()
      // @ts-ignore
      dataList.unshift(res_data[0])
      const newDataSetDataList = removeDuplicates(dataList)
      // @ts-ignore
      allData.unshift(res_data[0])
      const newDataSetAllData = removeDuplicates(allData)
      setAllData([...newDataSetAllData])
      setDataList([...newDataSetDataList])
    }

    setModalLoading(false)
  }

  const deleteDataHandle = async () => {
    setModalLoading(true)
    const selectedId = detailsView?.id
    const { data: res_data, error } = await delete_content_service({ table: 'promotype', id: selectedId! });
    if (!error) {
      setDataList((elem) => elem.filter((data: any) => data.id !== selectedId))
      setAllData((elem) => elem.filter((data: any) => data.id !== selectedId))
      setDetailsView(null)
      toast.success('Deleled successfully');
      closeModalHandle()

    }
    else if (error) {
      console.log(error.message)
      toast.error(error.message);
    }

    setModalLoading(false)
  }

  const editDataHandle = async () => {
    setModalLoading(true)
    try {
      const data = await update_content_service({ table: 'promotype', language: '', post_data: newDetails });
      if (data?.length) {
        toast.success('Updated successfully');
        closeModalHandle()

        const newData = data[0]
        // @ts-ignore
        const newDataSetDataList = allData.map((elem) => newData.id === elem.id ? newData : elem)
        // @ts-ignore
        const newDataSetAllData = dataList.map((elem) => newData.id === elem.id ? newData : elem)
        // @ts-ignore
        setAllData([...newDataSetAllData])
        // @ts-ignore
        setDataList([...newDataSetDataList])

        // @ts-ignore
        setDetailsView(newData)
      }


    } catch (error: any) {

      if (error && error?.message) {
        toast.error(error?.message);
        // throw new Error(error.message);
      } else {
        toast.error('Something went wrong!');
      }
    }
    setModalLoading(false)
  }


  const modalSubmitHandle = async () => {

    switch (activeModalMode) {
      case 'create':
        createNewDataHandle()
        break;
      case 'edit':
        editDataHandle()
        break;
      case 'delete':
        deleteDataHandle()
        break

    }
    // if(activeModalMode === ){
    // }
    // else if(activeModalMode === 'edit'){

    // }
    // else if()

  }






  const addNewHandle = () => {
    openModalHandle()
    setActiveModalMode('create')

  }
  const editHandle = () => {
    openModalHandle()
    setNewDetails(detailsView)
    setActiveModalMode('edit')

  }

  const deleteHandle = () => {
    openModalHandle()
    setActiveModalMode('delete')

  }

  const {t} = useTranslation(translationConstant.PROCODE)
  return (
    <main className="w-full  h-full font-[500] text-[20px] mt-16">

      <div className='grid grid-cols-3'>
        <div className='flex justify-between items-center  px-4 py-2 space-x-2 col-span-2'>
          <h1 className='text-xl font-bold'>
           {t("Procode_k1")}
          </h1>
          <button onClick={addNewHandle} className='bg-black text-sm text-white px-5 py-2 rounded-md hover:opacity-70 active:opacity-90'>
          {t("Procode_k2")}
          </button>
        </div>
      </div>


      <div className='w-full min-h-[84dvh] py-2 px-2 grid grid-cols-3 gap-2'>
        <div className='bg-[#EFEFEF] h-[100%]  col-span-2 rounded-md py-2 flex flex-col flex-1  ' >

          <div className='space-y-6 px-3 pb-4 flex justify-between mt-3'>
            <div className='flex-1'>
              <input onChange={onChangeHandle} type="text" placeholder={t("Procode_k3")} className='w-3/5 px-2 py-3 text-sm rounded-md focus:outline-none bg-white' />
            </div>



            {/* <div>
              <CiFilter size={30} />
            </div> */}



          </div>

          <div className="pt-5">
  <Table>
    <TableHeader>
      <TableRow>
        {fields
          .filter(({ table_column }) => table_column)
          .map(({ id, label, align, type }, ind) => (
            <TableHead
              key={ind}
              className={`${
                align || "text-center"
              } text-[#71717A] font-medium text-lg px-4 py-2`}
            >
              {t(label)}
              <button
                onClick={() => sortHandle(id, type)}
                className="active:opacity-50 ml-1"
              >
                <PiCaretUpDownBold
                  className={`inline ${
                    sortColumn === id ? "text-green-600" : "text-gray-400/50"
                  } hover:text-gray-600 active:text-gray-500`}
                />
              </button>
            </TableHead>
          ))}
      </TableRow>
    </TableHeader>

    <TableBody>
      {loading ? (
        <TableRow>
          <TableCell
            colSpan={fields.filter(({ table_column }) => table_column).length}
          >
            <div className="flex h-full flex-1 flex-col justify-center items-center">
              <Spinner size="xl" />
            </div>
          </TableCell>
        </TableRow>
      ) : dataList.length > 0 ? (
        dataList.map((elem) => {
          const { id } = elem
          return (
            <TableRow
              key={id}
              onClick={() => detailsViewHandle(elem)}
              className={`cursor-pointer hover:bg-gray-50`}
            >
              {fields
                .filter(({ table_column }) => table_column)
                .map(({ id: fieldKey, align, render_value } : any) => {
                  // @ts-ignore
                  const extract_val = render_value
                    ? render_value(elem[fieldKey])
                    : elem[fieldKey]

                  return (
                    <TableCell
                      key={fieldKey}
                      className={`${
                        align || "text-center"
                      } font-normal text-base px-5 py-2`}
                    >
                      {extract_val}
                    </TableCell>
                  )
                })}
            </TableRow>
          )
        })
      ) : (
        <TableRow>
          <TableCell
            colSpan={fields.filter(({ table_column }) => table_column).length}
          >
            <div className="flex h-full flex-1 flex-col justify-center items-center">
              <h1>No Data found!</h1>
            </div>
          </TableCell>
        </TableRow>
      )}
    </TableBody>
  </Table>
</div>


        </div>

        <div className='bg-[#EFEFEF] h-[100%] rounded-md overflow-hidden flex flex-col' >

          <div className='px-4 pt-5 '>
            <h1 className='text-xl font-bold w-full'>
              {t("Procode_k8")}
            </h1>
          </div>

          {/* Right side content goes here */}


          {detailsView && <div className='overflow-auto h-[100%] px-4 py-4 flex flex-col'>

            <div className='flex-1'>
              <div className='grid grid-cols-2 space-y-6'>
                {
                  // @ts-ignore
                  fields.filter(({ details_section }) => details_section).sort((a, b) => a.details_order - b.details_order).map(({ id, label, render_value, col_span_01, details_label }, ind) => {
                    // @ts-ignore
                    const extract_val = render_value ? render_value(detailsView[id]) : detailsView[id]

                    return <div key={ind} className={`${col_span_01 ? 'col-span-1' : 'col-span-2'}`}>
                      <div >
                        <h1 className='text-sm text-black'>
                          {t(details_label || label)}
                        </h1>
                        <p className='font-bold text-lg'>
                          {extract_val}
                        </p>
                      </div>
                    </div>
                  })
                }

              </div>
            </div>
            <div className=' flex items-center space-x-6'>
              <Action_Button onClick={editHandle} width='w-full' height='h-12' label={t("Procode_k15")} bg_color='bg-[#B6B6B6]' />
              <Action_Button onClick={deleteHandle} width='w-full' height='h-12' label={t("Procode_k16")} bg_color='bg-[#EF4343]' />
            </div>


















          </div>}
        </div>
      </div>
      <Custom_Modal
  submit_button_color={modal_titles[activeModalMode]?.button?.color}
  loading={modalLoading}
  buttonLabel={modal_titles[activeModalMode]?.button?.label}
  is_open={isOpenModal}
  Title={activeModalMode && modal_titles[activeModalMode]?.modalLabel}
  close_handle={closeModalHandle}
  open_handle={openModalHandle}
  create_new_handle={modalSubmitHandle}
>
  {activeModalMode === "delete" ? (
    <div>
      <h1>Are you sure you want to delete this Promocode?</h1>
    </div>
  ) : (
    <form className="grid grid-cols-2 gap-4">
      {fields
        .filter(({ editable }) => editable)
        .map(({ id, label, type, col_span_01, col_span_01_modal, min, max }) => {
          return (
            <div key={id} className={col_span_01 || col_span_01_modal ? "col-span-1" : "col-span-2"}>
              <Input_Component
                min={min || ""}
                //@ts-ignore
                max={max || ""}
                value={newDetails ? newDetails[id] : ""}
                type={type}
                border="border-2 border-gray-300 rounded-md"
                onChange={(e: string) => modalInputChangeHandle(e, id)}
                label={t(label)}
                isDate={type === "date"}
              />
            </div>
          );
        })}
    </form>
  )}
</Custom_Modal>

    </main>
  )
}

export default Page