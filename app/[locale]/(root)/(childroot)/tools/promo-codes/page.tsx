"use client";
import React, { useContext, useEffect, useState } from "react";
import { Spinner } from "flowbite-react";
import moment from "moment";
import {
  create_content_service,
  delete_content_service,
  fetch_content_service,
  update_content_service,
} from "@/utils/supabase/data_services/data_services";
import { PiCaretUpDownBold } from "react-icons/pi";
import { Custom_Modal } from "@/components/Modal_Components/Custom_Modal";
import { Input_Component } from "@/components/Input_Component";
import { Action_Button } from "@/components/Action_Button";
import { toast } from "react-toastify";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { useTranslation } from "react-i18next";
import { translationConstant } from "@/utils/translationConstants";
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet";
import { Slidercomp } from "@/components/sliderComp";
import { TabContext } from "@/context";
import { Eye, EyeIcon, PencilIcon, TrashIcon } from "lucide-react";

const fields = [
  {
    id: "id",
    label: "Promo id",
    type: "number",
    autoGenerated: true,
    editable: false,
    table_column: false,
    details_section: false,
    details_order: 0,
  },
  {
    id: "active",
    label: "Procode_k4",
    type: "boolean",
    editable: false,
    table_column: true,
    details_section: true,
    render_value: (val: boolean) => (val ? "Active" : "In-active"),
    align: "text-start",
    details_order: 3,
  },
  {
    id: "typename",
    label: "Procode_k5",
    details_label: "Procode_k9",
    type: "text",
    editable: true,
    table_column: true,
    details_section: true,
    details_order: 1,
  },
  {
    id: "multiple",
    label: "Procode_k12",
    type: "boolean",
    editable: true,
    table_column: false,
    details_section: true,
    render_value: (val: boolean) => (val ? "True" : "False"),
    details_order: 4,
  },
  {
    id: "percentage",
    label: "Procode_k6",
    type: "number",
    editable: true,
    table_column: true,
    details_section: true,
    render_value: (val: number) => `${val}%`,
    details_order: 2,
    col_span_01_modal: true,
    max: 100,
  },
  {
    id: "expiry",
    label: "Procode_k7",
    type: "date",
    editable: true,
    table_column: true,
    details_section: true,
    render_value: (val: string) =>
      moment(val, "YYYY-MM-DD h:mm s").format("MM/DD/YYYY"),
    min: moment(new Date()).format("YYYY-MM-DD"),
    align: "text-end",
    details_order: 5,
    col_span_01: true,
  },
  {
    id: "created_at",
    label: "Procode_k14",
    type: "date",
    editable: false,
    table_column: false,
    details_section: true,
    render_value: (val: string) =>
      moment(val, "YYYY-MM-DD h:mm:s").utc().format("MM/DD/YYYY"),
    details_order: 6,
    col_span_01: true,
  },
];

interface DataListInterface {
  [x: string]: any;
  id: number;
  typename: string;
  active: boolean;
  multiple: boolean;
  percentage: number;
  expiry: string;
  created_at: string;
}

function removeDuplicates(array: DataListInterface[]): DataListInterface[] {
  const seenIds = new Set<number>();
  return array.filter((element) => {
    if (!seenIds.has(element.id)) {
      seenIds.add(element.id);
      return true;
    }
    return false;
  });
}

const modal_titles: any = {
  create: {
    modalLabel: "Create New Promocode",
    button: {
      label: "Create Promocode",
      color: "info",
    },
  },
  edit: {
    modalLabel: "Edit Promocode",
    button: {
      label: "Update Promocode",
      color: "info",
    },
  },
  delete: {
    modalLabel: "Delete Promocode Confirmation",
    button: {
      label: "Delete Promocode",
      color: "failure",
    },
  },
};
const Page = () => {
  const [dataList, setDataList] = useState<DataListInterface[]>([]);
  const [allData, setAllData] = useState<DataListInterface[]>([]);
  const [detailsView, setDetailsView] = useState<DataListInterface | null>(
    null
  );
  const [loading, setLoading] = useState(true);
  const [sortOrder, setSortOrder] = useState(-1);
  const [sortColumn, setSortColumn] = useState("");
  const [isOpenModal, setIsOpenModal] = useState(false);
  const [activeModalMode, setActiveModalMode] = useState<
    "edit" | "delete" | "create" | ""
  >("");
  const [newDetails, setNewDetails] = useState<any>({});
  const [modalLoading, setModalLoading] = useState(false);

  const openModalHandle = () => {
    setIsOpenModal(true);
  };
  const closeModalHandle = () => {
    setIsOpenModal(false);
    setNewDetails({});
    setActiveModalMode("");
  };

  const onChangeHandle = (e: any) => {
    const val = e.target.value;
    if (val === "") {
      setDataList([...allData]);
    } else {
      const filteredData = allData.filter((elem) => {
        const concatName = elem.typename;
        return concatName.toLocaleLowerCase().includes(val.toLocaleLowerCase());
      });
      setDataList([...filteredData]);
    }
  };

  const detailsViewHandle = (param_data: DataListInterface) => {
    setDetailsView(param_data);
  };

  const fetch_handle = async () => {
    setLoading(true);
    // @ts-ignore
    const fetched_data: any = await fetch_content_service({
      table: "promotype",
    });
    setDataList(fetched_data);
    setAllData(fetched_data);
    setLoading(false);
  };

  useEffect(() => {
    fetch_handle();
  }, []);

  const sortHandle = (column: string, type: string) => {
    console.log(column);
    let sortedList: any = [];
    if (type === "text") {
      sortedList = dataList.sort((a, b) => {
        const aConcatName = a[column];
        const bConcatName = b[column];

        if (sortOrder === 1) {
          return aConcatName.localeCompare(bConcatName);
        } else {
          return bConcatName.localeCompare(aConcatName);
        }
      });
    } else if (type === "date") {
      if (sortOrder === 1) {
        sortedList = dataList.sort(
          (a, b) =>
            new Date(a[column]).getTime() - new Date(b[column]).getTime()
        );
      } else {
        sortedList = dataList.sort(
          (a, b) =>
            new Date(b[column]).getTime() - new Date(a[column]).getTime()
        );
      }
    } else {
      if (sortOrder === 1) {
        sortedList = dataList.sort((a, b) => a[column] - b[column]);
      } else {
        sortedList = dataList.sort((a, b) => b[column] - a[column]);
      }
    }

    setSortOrder((order) => (order === -1 ? 1 : -1));
    setDataList([...sortedList]);
    setSortColumn(column);
  };

  const modalInputChangeHandle = (e: string, id: string) => {
    setNewDetails((pre: any) => ({ ...pre, [id]: e }));
  };

  const createNewDataHandle = async () => {
    setModalLoading(true);
    const { data: res_data, error } = await create_content_service({
      table: "promotype",
      language: "",
      post_data: newDetails,
    });
    if (error) {
      console.log(error.message);
      toast.error(error.message);
      // throw new Error(error.message);
    }

    if (res_data?.length) {
      toast.success("Created successfully");
      closeModalHandle();
      // @ts-ignore
      dataList.unshift(res_data[0]);
      const newDataSetDataList = removeDuplicates(dataList);
      // @ts-ignore
      allData.unshift(res_data[0]);
      const newDataSetAllData = removeDuplicates(allData);
      setAllData([...newDataSetAllData]);
      setDataList([...newDataSetDataList]);
    }

    setModalLoading(false);
  };

  const deleteDataHandle = async () => {
    setModalLoading(true);

    // Get ID from EITHER newDetails (icon click) OR detailsView (sheet button)
    const selectedId = newDetails?.id || detailsView?.id;

    const { data: res_data, error } = await delete_content_service({
      table: "promotype",
      id: selectedId!,
    });

    if (!error) {
      // Update both data lists
      setDataList((list) => list.filter((data) => data.id !== selectedId));
      setAllData((list) => list.filter((data) => data.id !== selectedId));

      // Reset states if deleted item was being viewed
      if (detailsView?.id === selectedId) {
        setDetailsView(null); // Close sheet if open
      }

      toast.success("Deleted successfully");
      closeModalHandle();
    } else {
      toast.error(error.message);
    }

    setModalLoading(false);
  };

  const editDataHandle = async () => {
    setModalLoading(true);
    try {
      const data = await update_content_service({
        table: "promotype",
        language: "",
        post_data: newDetails,
      });
      if (data?.length) {
        toast.success("Updated successfully");
        closeModalHandle();

        const newData = data[0];
        // @ts-ignore
        const newDataSetDataList = allData.map((elem) =>
          newData.id === elem.id ? newData : elem
        );
        // @ts-ignore
        const newDataSetAllData = dataList.map((elem) =>
          newData.id === elem.id ? newData : elem
        );
        // @ts-ignore
        setAllData([...newDataSetAllData]);
        // @ts-ignore
        setDataList([...newDataSetDataList]);

        // @ts-ignore
        setDetailsView(newData);
      }
    } catch (error: any) {
      if (error && error?.message) {
        toast.error(error?.message);
        // throw new Error(error.message);
      } else {
        toast.error("Something went wrong!");
      }
    }
    setModalLoading(false);
  };

  const modalSubmitHandle = async () => {
    switch (activeModalMode) {
      case "create":
        createNewDataHandle();
        break;
      case "edit":
        editDataHandle();
        break;
      case "delete":
        deleteDataHandle();
        break;
    }
    // if(activeModalMode === ){
    // }
    // else if(activeModalMode === 'edit'){

    // }
    // else if()
  };

  const addNewHandle = () => {
    openModalHandle();
    setActiveModalMode("create");
  };
  const editHandle = () => {
    if (detailsView) {
      setNewDetails(detailsView);
      setActiveModalMode("edit");
      openModalHandle();
    }
  };

  const deleteHandle = () => {
    if (detailsView) {
      setActiveModalMode("delete");
      openModalHandle();
    }
  };

  const { setActiveTitle } = useContext(TabContext);

  useEffect(() => {
    setActiveTitle("Sidebar_k16");
  }, []);

  const { t } = useTranslation(translationConstant.PROCODE);
  return (
    <main className="w-full  h-full font-[500] text-[20px] overflow-x-hidden">
      <div className="grid grid-cols-3 w-[150%]">
        <div className="flex justify-between items-center  px-4 py-2 space-x-2 col-span-2">
          <h1 className="text-xl font-bold">{t("Procode_k1")}</h1>
        </div>
      </div>

      <div className="w-full min-h-[84dvh] py-2 px-2 grid grid-cols-3 gap-2">
        <div className=" h-[100%]  col-span-2 rounded-md py-2 flex flex-col flex-1 w-[150%] ">
          <div className="space-y-6 px-3 pb-4 flex justify-between mt-3">
            <div className="flex justify-between items-center w-full">
              <div>
                <input
                  onChange={onChangeHandle}
                  type="text"
                  placeholder={t("Procode_k3")}
                  className="w-96 px-2 py-3 text-sm rounded-md focus:outline-none bg-white"
                />
              </div>
              <div>
                <button
                  onClick={addNewHandle}
                  className="bg-[#0066ff] text-sm text-white px-5 py-2 rounded-md hover:opacity-70 active:opacity-90"
                >
                  {t("Procode_k2")}
                </button>
              </div>
            </div>

            {/* <div>
              <CiFilter size={30} />
            </div> */}
          </div>

          <div className="">
            <Table className="border-collapse border border-gray-200 w-full">
              <TableHeader>
                <TableRow>
                  <TableHead className="text-left px-4 py-2 border-b border-gray-300">
                    <input type="checkbox" />
                  </TableHead>
                  {fields
                    .filter(({ table_column }) => table_column)
                    .map(({ id, label, align, type }, ind) => (
                      <TableHead
                        key={ind}
                        className={`${
                          align || "text-left"
                        } text-[#71717A] font-medium text-lg px-4 py-2 border-b text-left border-gray-300`}
                      >
                        {t(label)}
                        <button
                          onClick={() => sortHandle(id, type)}
                          className="active:opacity-50 ml-1"
                        >
                          <PiCaretUpDownBold
                            className={`inline ${
                              sortColumn === id
                                ? "text-green-600"
                                : "text-gray-400/50"
                            } hover:text-gray-600 active:text-gray-500`}
                          />
                        </button>
                      </TableHead>
                    ))}
                  <TableHead className="text-left text-[#71717A] font-medium text-lg px-4 py-2 border-b border-gray-300">
                    Actions
                  </TableHead>
                </TableRow>
              </TableHeader>

              <TableBody>
                {loading ? (
                  <TableRow>
                    <TableCell
                      colSpan={fields.filter((f) => f.table_column).length + 2}
                    >
                      <div className="flex h-full flex-1 flex-col justify-center items-center">
                        <Spinner size="xl" />
                      </div>
                    </TableCell>
                  </TableRow>
                ) : dataList.length > 0 ? (
                  dataList.map((elem) => {
                    const { id, status } = elem;
                    return (
                      <TableRow
                        key={id}
                        className="hover:bg-gray-50 cursor-pointer border-b border-gray-300"
                        onClick={() => detailsViewHandle(elem)}
                      >
                        <TableCell className="text-left px-4 py-2">
                          <input type="checkbox" />
                        </TableCell>

                        {fields
                          .filter(({ table_column }) => table_column)
                          .map(({ id: fieldKey, align, render_value }: any) => {
                            const extract_val = render_value
                              ? render_value(elem[fieldKey])
                              : elem[fieldKey];

                            return (
                              <TableCell
                                key={fieldKey}
                                className={`${
                                  align || "text-left"
                                } font-normal text-left text-base px-5 py-2`}
                              >
                                {fieldKey === "status" ? (
                                  <span
                                    className={`px-2 py-1 rounded-full text-xs font-semibold ${
                                      extract_val === "Active"
                                        ? "bg-green-100 text-green-700"
                                        : "bg-orange-100 text-orange-700"
                                    }`}
                                  >
                                    {extract_val}
                                  </span>
                                ) : (
                                  extract_val
                                )}
                              </TableCell>
                            );
                          })}

                        <TableCell className="text-left px-4 py-2 space-x-2">
                          <EyeIcon
                            className="text-gray-500 hover:text-black w-4 h-4 inline cursor-pointer"
                            onClick={(e) => {
                              e.stopPropagation();
                              detailsViewHandle(elem);
                            }}
                          />
                          <PencilIcon
                            className="text-blue-500 hover:text-blue-700 w-4 h-4 inline cursor-pointer ml-2"
                            onClick={(e) => {
                              e.stopPropagation();
                              setNewDetails(elem);
                              setActiveModalMode("edit");
                              setIsOpenModal(true);
                            }}
                          />
                          <TrashIcon
                            className="text-red-500 hover:text-red-700 w-4 h-4 inline cursor-pointer ml-2"
                            onClick={(e) => {
                              e.stopPropagation();
                              setNewDetails(elem);
                              setActiveModalMode("delete");
                              setIsOpenModal(true);
                            }}
                          />
                        </TableCell>
                      </TableRow>
                    );
                  })
                ) : (
                  <TableRow>
                    <TableCell
                      colSpan={fields.filter((f) => f.table_column).length + 2}
                    >
                      <div className="flex h-full flex-1 flex-col justify-center items-center">
                        <h1>No Data found!</h1>
                      </div>
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>

            {/* Footer */}
            <div className="flex items-center justify-between mt-4 px-2">
              <p className="text-sm text-muted-foreground">
                0 of {dataList.length} row(s) selected.
              </p>
              <div className="flex space-x-2">
                <button className="text-sm border rounded px-3 py-1 hover:bg-gray-100">
                  Previous
                </button>
                <button className="text-sm border rounded px-3 py-1 hover:bg-gray-100">
                  Next
                </button>
              </div>
            </div>
          </div>
        </div>

        <Sheet
          open={!!detailsView}
          onOpenChange={(open) => !open && setDetailsView(null)}
        >
          <SheetContent className="p-0 pt-10">
            <div className="flex flex-col h-full">
              <div className="px-4 pt-2 pb-3">
                <SheetHeader className="sr-only">
                  <SheetTitle>{t("Procode_k8")}</SheetTitle>
                </SheetHeader>
                <h1 className="text-xl font-bold">{t("Procode_k8")}</h1>
              </div>

              {detailsView && (
                <div className="flex-1 overflow-auto px-4">
                  <div className="grid grid-cols-2 gap-y-6">
                    {fields
                      .filter(({ details_section }) => details_section)
                      .sort((a, b) => a.details_order - b.details_order)
                      .map((field, ind) => {
                        // @ts-ignore - Temporary type handling
                        const extract_val = field.render_value
                          ? // @ts-ignore
                            field.render_value(detailsView[field.id])
                          : detailsView[field.id];

                        return (
                          <div
                            key={ind}
                            className={
                              field.col_span_01 ? "col-span-1" : "col-span-2"
                            }
                          >
                            <div>
                              <h1 className="text-sm text-gray-600">
                                {t(field.details_label || field.label)}
                              </h1>
                              <p className="font-medium text-base">
                                {extract_val || "N/A"}
                              </p>
                            </div>
                          </div>
                        );
                      })}
                  </div>

                  <div className="flex gap-4 pt-8 pb-4">
                    <Action_Button
                      onClick={editHandle}
                      width="w-full"
                      height="h-12"
                      label={t("Procode_k15")}
                      bg_color="bg-[#0066ff]"
                      border="#0066ff"
                    />
                    <Action_Button
                      onClick={deleteHandle}
                      width="w-full"
                      height="h-12"
                      label={t("Procode_k16")}
                      bg_color="bg-[#FFD2CC]"
                      border="#FFD2CC"
                    />
                  </div>
                </div>
              )}
            </div>
          </SheetContent>
        </Sheet>
      </div>
      <Custom_Modal
        submit_button_color={modal_titles[activeModalMode]?.button?.color}
        loading={modalLoading}
        buttonLabel={modal_titles[activeModalMode]?.button?.label}
        is_open={isOpenModal}
        Title={activeModalMode && modal_titles[activeModalMode]?.modalLabel}
        close_handle={closeModalHandle}
        // @ts-ignore
        open_handle={openModalHandle}
        create_new_handle={modalSubmitHandle}
      >
        {activeModalMode === "delete" ? (
          <div>
            <h1>Are you sure you want to delete this Promocode?</h1>
          </div>
        ) : (
          <form className="grid grid-cols-2 gap-4">
            {fields
              .filter(({ editable }) => editable)
              .map(
                ({
                  id,
                  label,
                  type,
                  col_span_01,
                  col_span_01_modal,
                  min,
                  max,
                }) => {
                  return (
                    <div
                      key={id}
                      className={`col-span-${
                        col_span_01 || col_span_01_modal ? "1" : "2"
                      } flex flex-col gap-1`}
                    >
                      {id === "percentage" ? (
                        <div className="flex flex-col w-full">
                          <label className="text-base font-semibold mb-4">
                            Percentage
                          </label>
                          <Slidercomp
                            className="w-full"
                            value={newDetails ? newDetails[id] : ""}
                            // @ts-ignore
                            onChange={(e: string) =>
                              modalInputChangeHandle(e, id)
                            }
                          />
                        </div>
                      ) : (
                        <Input_Component
                          min={min || ""}
                          //@ts-ignore
                          max={max || ""}
                          value={newDetails ? newDetails[id] : ""}
                          type={type}
                          border="border-2 border-gray-300 rounded-md w-full"
                          onChange={(e: string) =>
                            modalInputChangeHandle(e, id)
                          }
                          label={t(label)}
                          isDate={type === "date"}
                        />
                      )}
                    </div>
                  );
                }
              )}
          </form>
        )}
      </Custom_Modal>
    </main>
  );
};

export default Page;
